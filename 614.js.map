{"version":3,"file":"614.js","mappings":"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","sources":["webpack://cod-dicomweb-server/webpack/universalModuleDefinition","webpack://cod-dicomweb-server/./node_modules/comlink/dist/esm/comlink.mjs","webpack://cod-dicomweb-server/./src/classes/customClasses.ts","webpack://cod-dicomweb-server/./src/dataRetrieval/scripts/filePartial.ts","webpack://cod-dicomweb-server/./src/dataRetrieval/workers/filePartialWorker.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","export class CustomError extends Error {}\n\nexport class CustomErrorEvent extends Event {\n  error: CustomError;\n  message: string;\n\n  constructor(message: string, error: CustomError) {\n    super(message);\n    this.message = message;\n    this.error = error;\n  }\n}\n\nexport class CustomMessageEvent extends MessageEvent<{\n  url: string;\n  position: number;\n  chunk?: Uint8Array;\n  isAppending?: boolean;\n  fileArraybuffer?: Uint8Array;\n  offsets?: { startByte: number; endByte: number };\n}> {}\n","import { CustomError } from '../../classes/customClasses';\n\nconst filePartial = {\n  async partial(\n    args: { url: string; offsets?: { startByte: number; endByte: number }; headers?: Record<string, string> },\n    callBack: (data: { url: string; fileArraybuffer: Uint8Array; offsets: { startByte: number; endByte: number } }) => void\n  ): Promise<void | Error> {\n    const { url, offsets, headers } = args;\n    if (offsets?.startByte && offsets?.endByte) {\n      headers['Range'] = `bytes=${offsets.startByte}-${offsets.endByte - 1}`;\n    }\n\n    await fetch(url, { headers })\n      .then((response) => response.arrayBuffer())\n      .then((data) => callBack({ url, fileArraybuffer: new Uint8Array(data), offsets }))\n      .catch((error) => {\n        throw new CustomError('filePartial.ts: Error when fetching file: ' + error?.message);\n      });\n  }\n};\n\nexport default filePartial;\n","import { expose } from 'comlink';\nimport filePartial from '../scripts/filePartial';\n\nconst filePartialWorker = {\n  ...filePartial,\n  partial: (args: any) => filePartial.partial(args, postMessage)\n};\n\nexpose(filePartialWorker);\n"],"names":["root","factory","exports","module","define","amd","a","i","self","proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","proxyTransferHandler","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","ep","target","pendingListeners","Map","addEventListener","ev","data","id","resolver","get","delete","createProxy","wrap","transferHandlers","value","serialized","Error","isError","message","name","stack","Object","assign","globalThis","allowedOrigins","callback","origin","allowedOrigin","RegExp","test","isAllowedOrigin","console","warn","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","error","TypeError","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","clear","length","r","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","Array","prototype","concat","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","CustomError","_Error","_classCallCheck","_callSuper","arguments","_inherits","_createClass","_wrapNativeSuper","_regeneratorRuntime","e","t","n","hasOwnProperty","o","defineProperty","iterator","c","asyncIterator","u","toStringTag","enumerable","configurable","writable","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","partial","args","callBack","_callee","url","offsets","headers","_context","startByte","endByte","fetch","response","arrayBuffer","fileArraybuffer","Uint8Array","_next","_throw","_objectSpread","filePartial"],"sourceRoot":""}